import com.github.jk1.license.filter.ExcludeTransitiveDependenciesFilter
import com.github.jk1.license.filter.LicenseBundleNormalizer
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'com.github.jk1.dependency-license-report' version '2.0'
    id "com.github.ben-manes.versions" version "0.51.0"
    id "java"
    id "application"
}

/**  === Core Gradle configuration === **/
// tasks to be executed by default when running Gradle without specifying tasks
defaultTasks "clean", "uberJar"
// base name for the archive files created (e.g., JAR files).
base.archivesName = "ModelPolisher"
version = "2.1"

/** === License Report plugin configuration === **/
licenseReport {
    filters = [
	/*
	 - Ensures that similar licenses are grouped together
	 */
	new LicenseBundleNormalizer(),
	/*
	 - Transitive dependencies are not included in the report
	 - Be aware that excluding transitive dependencies might omit some licenses from the report
	 */
	new ExcludeTransitiveDependenciesFilter()
    ]
}

/** === Java plugin configuration === **/
// sourceCompatibility defines the version of Java for compiling the source code.
// Ensures that the Java compiler will accept Java 17 language features.
sourceCompatibility = JavaVersion.VERSION_17

// targetCompatibility defines the version of Java bytecode to be generated.
// Ensures that the compiled bytecode is compatible with Java 18 JVMs.
// Implication: The generated bytecode will run on Java 17       and newer JVMs,
// but not on older versions.
targetCompatibility = JavaVersion.VERSION_17

/*
 Logical grouping of source files and resources.
 Defines what source files to compile and what resources to include in the classpath.
 */
sourceSets {
    // compiled into the main application JAR
    main {
	java {
	    srcDirs = ["src/main/java"]
	}
	resources {
	    srcDirs = ["src/main/resources"]
	}
    }
    // compiled and used for running tests
    // Depends on the output of the main source set,
    // i.e. includes the compiled classes from the main source set in its classpath.
    test {
	java {
	    srcDirs = ["src/test/java"]
	}
	resources {
	    srcDirs = ["src/test/resources"]
	}
    }
}

// specify where Gradle should look for dependencies
// i.e. the locations (repositories) from which to fetch the libraries and plugins
repositories {
    // Use Maven Central
    mavenCentral()
    // snapshot versions of artifacts (i.e. dependency JARs)
    // Sonatype is the company behind the Maven Central repository
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven {
        name "biodata-reposilite"
        url "https://biodata.informatik.uni-halle.de/maven/releases"
    }

}

/** ==== Dependencies ==== **/
// variables used in dependency definitions
def jacksonVersion = "2.17.1"
def jupiterVersion = "5.10.2"
def testContainersVersion = "1.20.1"

/*
 - `implementation`: Dependencies required for the main source set.
 Will be included in the compiled output and runtime classpath.
 - `testImplementation`: Dependencies required only for compiling and running tests.
 Not included in the final runtime.
 - `testRuntimeOnly`: Dependencies required only at test runtime, not at compile time.
 */
dependencies {
    // systems biology tools
    implementation "de.zbit.SysBio:SysBio:1390"
    // reading, writing, and manipulating SBML files
    implementation("org.sbml.jsbml:jsbml:1.6.1") {
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.apache.logging.log4j", module: "log4j-1.2-api   "
        exclude group: "org.apache.logging.log4j", module: "log4j-slf4j-impl"
        exclude group: "org.apache.commons", module: "logging"
    }
    // ontology support within BioJava
    implementation "org.biojava:biojava-ontology:7.1.1"
    // handle Combine Archives (packages of biological models)
    implementation "de.uni-rostock.sbi:CombineArchive:1.4.1"
    // interacting with MATLAB files
    implementation 'us.hebi.matlab.mat:mfl-core:0.5.15'

    // JDBC connection pool
    implementation "com.zaxxer:HikariCP:5.1.0"
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.16.1'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.15.0'
// JSON processor
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
// data binding for Jackson
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    // Java port of HTML Tidy, for cleaning up malformed HTML
    implementation "net.sf.jtidy:jtidy:r938"
    // official JDBC driver for PostgreSQL
    implementation "org.postgresql:postgresql:42.7.3"

    // Test implementation dependencies
    // API for writing tests with JUnit 5
    testImplementation "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}"
    // for integration testing with Docker containers
    testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
    // integration of Testcontainers with JUnit Jupiter
    testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"

    // Test runtime-only dependencies
    // runtime engine for executing tests with JUnit 5
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}"
}

configurations {
    runtime.exclude group: "org.apache.logging.log4j", module: "log4j-core"
    runtime.exclude group: "org.apache.logging.log4j", module: "log4j-api"
    runtime.exclude group: "org.apache.logging.log4j", module: "log4j-1.2-api"
    runtime.exclude group: "org.apache.logging.log4j", module: "log4j-slf4j-impl"
    runtime.exclude group: "org.apache.commons", module: "logging"
}

/** === Configuration for pre-existing Tasks === **/

// config for all jar tasks
tasks.withType(Jar).configureEach {
    dependsOn test
    destinationDirectory = file("$rootDir/target")
    manifest {
        attributes(
                "Version": project.version,
                "Implementation-Title": "ModelPolisher",
                "Implementation-Version": project.version,
                "Specification-Vendor": "University of California, San Diego",
                "Specification-Title": "ModelPolisher",
                "Implementation-Vendor-Id": "edu.ucsd.sbrg",
                "Implementation-Vendor": "University of California, San Diego",
                "Main-Class": "edu.ucsd.sbrg.ModelPolisherCLILauncher"
        )
    }
}

// enable deprecation linter in compilation
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-Xlint:deprecation'
}

// config for all test tasks
tasks.withType(Test).configureEach {
    environment "TESTCONTAINERS_RYUK_DISABLED",     "true"
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
        // showStandardStreams = false
        // events "failed"
        // showCauses false
        // showExceptions false
        // showStackTraces false
    }
}

// clean up target directory
clean.doFirst {
    file(".gradle").deleteDir()
    file("target").deleteDir()
}

tasks.javadoc {
    classpath = sourceSets.main.runtimeClasspath
    source = sourceSets.main.allJava
    options.addBooleanOption('Xdoclint:none', true)
    file(new File(rootProject.projectDir.toString() + "/docs")).mkdirs()
    destinationDir = new File(rootProject.projectDir.toString() + "/docs")
}


/** === Custom Tasks === **/
// get latest version of MIRIAM registry
tasks.register('downloadMIRIAM') {
    doLast {
        def registryUrl = 'https://registry.api.identifiers.org/resolutionApi/getResolverDataset'
        def parentDir = file('src/main/resources/edu/ucsd/sbrg/resolver/identifiersorg')
        def registryFile = file("${parentDir}/IdentifiersOrg-Registry.json")

        if (!parentDir.exists()) {
            parentDir.mkdirs()
        }

        def registry = new URL(registryUrl).text
        def jsonParser = new JsonSlurper()
        def parsedJson = jsonParser.parseText(registry)
        def prettyJson = JsonOutput.prettyPrint(JsonOutput.toJson(parsedJson))
        registryFile.text = prettyJson
    }
}

// ensure downloadMIRIAM task is executed before processResources task
// processResources is inbuilt in the Java plugin and
// copies resources from src/main/resources to build/resources/main
processResources.dependsOn(downloadMIRIAM)

// create distributable standalone JAR that includes
// not only the project's compiled classes but also all the dependencies' classes
tasks.register('uberjar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

/*
 === Application Plugin configuration
 */
application {
    mainClass.set('ModelPolisher')
}
