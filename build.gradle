plugins {
    id "java"
    id "application"
    id 'com.github.jk1.dependency-license-report' version '2.0'
}

licenseReport {
    filters = [
            new com.github.jk1.license.filter.LicenseBundleNormalizer(),
            new com.github.jk1.license.filter.ExcludeTransitiveDependenciesFilter()
    ]
}

// Java versions for compilation and output
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

defaultTasks "clean", "fatJar"
archivesBaseName = "ModelPolisher"
mainClassName = "ModelPolisher"
version = "2.1"

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    // local dependencies
    flatDir {
        dirs "lib/de/zbit/SysBio/1390"
    }
}

def jacksonVersion = "2.11.3"
def jupiterVersion = "5.7.0"

dependencies {
    implementation "org.sbml.jsbml:jsbml:1.5"
    implementation "de.zbit:SysBio:1390"
    implementation "org.postgresql:postgresql:42.2.18"
    implementation "org.biojava:biojava-ontology:5.4.0"
    implementation 'us.hebi.matlab.mat:mfl-core:0.5.6'
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "net.sf.jtidy:jtidy:r938"
    implementation "de.uni-rostock.sbi:CombineArchive:1.4.1"
    implementation "com.zaxxer:HikariCP:3.4.5"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}"
}

test {
    testLogging {
        showStandardStreams = true
    }
}

// get latest version of MIRIAM registry
task downloadMIRIAM() {
    doFirst {
        String registry = new URL("https://registry.api.identifiers.org/resolutionApi/getResolverDataset").getText()
        File parentDir = new File("src/main/resources/edu/ucsd/sbrg/miriam/");
        if (!parentDir.exists()) {
            mkdir(parentDir)
        }
        File registryFile = new File(parentDir.toString() + "/IdentifiersOrg-Registry.json")
        BufferedWriter writer = new BufferedWriter(new FileWriter(registryFile))
        writer.write(registry)
        writer.close()
    }
    processResources.dependsOn downloadMIRIAM
}

// config for all jar tasks
tasks.withType(Jar) {
    dependsOn test
    destinationDirectory = file("$rootDir/target")
    manifest {
        attributes(
                "Version": project.version,
                "Implementation-Title": "ModelPolisher",
                "Implementation-Version": project.version,
                "Specification-Vendor": "University of California, San Diego",
                "Specification-Title": "ModelPolisher",
                "Implementation-Vendor-Id": "edu.ucsd.sbrg",
                "Implementation-Vendor": "University of California, San Diego",
                "Main-Class": "edu.ucsd.sbrg.bigg.ModelPolisher"
        )
    }
}

//with dependencies
task fatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

//build docker container
task devel(type: Exec) {
    commandLine "sh", "-c", "cp target/ModelPolisher-" + project.version + ".jar docker/java_docker && " +
            "export COMPOSE_FILE=docker-compose.devel.yml && " +
            "docker-compose pull && " +
            "docker-compose build && " +
            "rm docker/java_docker/ModelPolisher-" + project.version + ".jar"
    dependsOn fatJar
}

// zip lib folder for release
task zipLibs(type: Zip) {
    from "lib"
    into "lib"
    include "**/**"
    archiveFileName = "lib.zip"
    destinationDirectory = file("target/")
}

// zip script files for release
task zipScripts(type: Zip) {
    from "src/scripts"
    into "scripts"
    include "**/**"
    archiveFileName = "scripts.zip"
    destinationDirectory = file("target/")
}

// create lightJar for release
task release() {
    dependsOn fatJar
    dependsOn tasks["zipLibs"]
    dependsOn tasks["zipScripts"]
}

// clean up target directory
clean.doFirst {
    file(".gradle").deleteDir()
    file("target").deleteDir()
}

// bump jar version in ModelPolisher.sh
if (project.file( "src/scripts/ModelPolisher.sh").exists()) {
    task bumpVersionMP() {
        replaceVersion(rootProject.projectDir.toString() + "/docker/java_docker/Dockerfile")
        replaceVersion(rootProject.projectDir.toString() + "/.travis.yml")
        replaceVersion(rootProject.projectDir.toString() + "/README.md")
        replaceVersion(rootProject.projectDir.toString() + "/src/scripts/ModelPolisher.sh")
    }
    processResources.dependsOn bumpVersionMP
}

def replaceVersion(path) {
    ArrayList<String> content = new ArrayList<>()
    File travisFile = new File(path)
    String MPVersion = /ModelPolisher-(.*?)\d{1,2}(.\d{1,2}){1,2}(-beta)?.jar/
    travisFile.eachLine {
        line ->
            content.add(line.replaceAll(MPVersion, "ModelPolisher-" + "${version}.jar"))
    }
    BufferedWriter writer = new BufferedWriter(new FileWriter(travisFile))
    content.each {
        line -> writer.writeLine(line)
    }
    writer.close()
}
